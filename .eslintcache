[{"C:\\dev\\tv-channels\\src\\index.tsx":"1","C:\\dev\\tv-channels\\src\\reportWebVitals.ts":"2","C:\\dev\\tv-channels\\src\\App.tsx":"3","C:\\dev\\tv-channels\\src\\components\\DayNavigator.tsx":"4","C:\\dev\\tv-channels\\src\\components\\HourNavigator.tsx":"5","C:\\dev\\tv-channels\\src\\components\\ChannelBlock.tsx":"6","C:\\dev\\tv-channels\\src\\components\\ChannelShows.tsx":"7","C:\\dev\\tv-channels\\src\\components\\ShowBlock.tsx":"8","C:\\dev\\tv-channels\\src\\utils\\Utils.tsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":6309,"mtime":1614639175027,"results":"13","hashOfConfig":"11"},{"size":732,"mtime":1613938341711,"results":"14","hashOfConfig":"11"},{"size":2062,"mtime":1614639111196,"results":"15","hashOfConfig":"11"},{"size":937,"mtime":1614524622733,"results":"16","hashOfConfig":"11"},{"size":3571,"mtime":1614813492980,"results":"17","hashOfConfig":"11"},{"size":1759,"mtime":1614638419604,"results":"18","hashOfConfig":"11"},{"size":4577,"mtime":1614526690998,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"v0ozz6",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},"C:\\dev\\tv-channels\\src\\index.tsx",[],["40","41"],"C:\\dev\\tv-channels\\src\\reportWebVitals.ts",[],"C:\\dev\\tv-channels\\src\\App.tsx",["42","43","44"],"C:\\dev\\tv-channels\\src\\components\\DayNavigator.tsx",[],"C:\\dev\\tv-channels\\src\\components\\HourNavigator.tsx",[],"C:\\dev\\tv-channels\\src\\components\\ChannelBlock.tsx",[],"C:\\dev\\tv-channels\\src\\components\\ChannelShows.tsx",["45","46"],"C:\\dev\\tv-channels\\src\\components\\ShowBlock.tsx",["47"],"C:\\dev\\tv-channels\\src\\utils\\Utils.tsx",["48","49"],"import {\r\n  Channel,\r\n  Filter,\r\n  FilterOption,\r\n  Interval,\r\n  Show,\r\n  TimeBlock,\r\n} from \"../model/Model\";\r\nimport Moment from \"moment\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst exaustODataEndpoint = async (url: string, all = true): Promise<any> => {\r\n  const response = await fetch(url);\r\n  const decodedResponse = await response.json();\r\n  const data = decodedResponse.value;\r\n  const nextLink = decodedResponse[\"odata.nextLink\"];\r\n  if (nextLink && all) {\r\n    const nextData = await exaustODataEndpoint(nextLink, all);\r\n    return [...data, ...nextData];\r\n  } else {\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const getChannels = async (): Promise<Channel[]> => {\r\n  let channels: Channel[] = await exaustODataEndpoint(\r\n    \"http://ott.online.meo.pt/catalog/v9/Channels?UserAgent=IPTV_OFR_AND&OfferId=21600543&$orderby=ChannelPosition%20asc&$inlinecount=allpages\",\r\n    true\r\n  );\r\n  // channels = [channels[0], channels[1], channels[2], channels[3], channels[4]];\r\n  return channels;\r\n\r\n  // const programsByChannel = await Promise.all(\r\n  //   channels.map((channel: any) => fetchChannelData(channel, data.date))\r\n  // );\r\n  // const dataByChannel = programsByChannel.reduce<DataByChannel>(\r\n  //   (acc, pro, index) => ({ ...acc, [channels[index].Id]: pro }),\r\n  //   {}\r\n  // );\r\n};\r\n\r\nexport const getChannelShows = async (\r\n  channel: Channel,\r\n  day: Moment.Moment\r\n): Promise<Show[]> => {\r\n  const dateFormat = \"YYYY-MM-DDTHH:mm:ss\";\r\n  const startDate = Moment(day).add(-1, \"day\").endOf(\"day\").format(dateFormat);\r\n  const endDate = Moment(day).add(1, \"day\").startOf(\"day\").format(dateFormat);\r\n  return await exaustODataEndpoint(\r\n    `http://ott.online.meo.pt/Program/v9/Programs?UserAgent=IOS&$orderby=StartDate%20asc&$filter=CallLetter%20eq%20%27${channel.CallLetter}%27%20and%20StartDate%20gt%20datetime%27${startDate}%27%20and%20StartDate%20lt%20datetime%27${endDate}%27%20and%20IsEnabled%20eq%20true%20and%20IsBlackout%20eq%20false&$inlinecount=allpages`\r\n  );\r\n\r\n  // const result = await axios(`http://services.sapo.pt/EPG/GetChannelByDateInterval?channelSigla=${channelNick}&startDate=${startDate}&endDate=${endDate}`);\r\n};\r\n\r\nexport const getInterval = (timeBlock: TimeBlock): Interval => {\r\n  return {\r\n    StartDate: timeBlock.StartDate,\r\n    EndDate: Moment(timeBlock.StartDate).add(timeBlock.Hours, \"hours\"),\r\n  };\r\n};\r\n\r\nexport function useOnScreen(ref: any, rootMargin = \"0px\") {\r\n  // State and setter for storing whether element is visible\r\n  const [isIntersecting, setIntersecting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        // Update our state when observer callback fires\r\n        setIntersecting(\r\n          entry.isIntersecting && entry.boundingClientRect.height > 0\r\n        );\r\n      },\r\n      {\r\n        rootMargin,\r\n      }\r\n    );\r\n    if (ref.current) {\r\n      observer.observe(ref.current);\r\n    }\r\n    return () => {\r\n      if (ref.current) {\r\n        observer.unobserve(ref.current);\r\n      }\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return isIntersecting;\r\n}\r\n\r\nexport const ALL_OPTION_VALUE = \"_all\";\r\nexport const ALL_OPTION: FilterOption<string> = {\r\n  value: ALL_OPTION_VALUE,\r\n  title: \"All\",\r\n};\r\n\r\nexport const DEFAULT_FILTER: Filter<string> = {\r\n  value: ALL_OPTION_VALUE,\r\n  options: [ALL_OPTION],\r\n};\r\n\r\nexport const getOptionsByValues = (\r\n  values: string[]\r\n): FilterOption<string>[] => {\r\n  // @ts-ignore\r\n  const uniqueValues: string[] = [...new Set(values)];\r\n  const options: FilterOption<string>[] = uniqueValues.map((v) => ({\r\n    value: v,\r\n    title: v,\r\n  }));\r\n  return [ALL_OPTION, ...options];\r\n};\r\n\r\nexport const getVideoUrl = (channel: Channel, show?: Show): string => {\r\n  const { FriendlyUrlName } = channel;\r\n  const { StartDate, EndDate } = show\r\n    ? show\r\n    : { StartDate: Moment(), EndDate: null };\r\n  const formattedStartDate = Moment(StartDate).format(\"YYYY-MM-DDTHH:mm:00\");\r\n  const formattedEndDate = EndDate\r\n    ? Moment(EndDate).format(\"YYYY-MM-DDTHH:mm:00\")\r\n    : \"END\";\r\n  return `http://213.13.23.76/wp/cdn-vspp-pcs1.online.meo.pt/shls/LIVE$${FriendlyUrlName}/index.m3u8?device=IOS_Live&start=${formattedStartDate}&end=${formattedEndDate}`;\r\n};\r\n\r\nexport const useDebounce = (value: string, timeout: number) => {\r\n  const [state, setState] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => setState(value), timeout);\r\n\r\n    return () => clearTimeout(handler);\r\n  }, [value, timeout]);\r\n\r\n  return state;\r\n};\r\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":8,"column":32,"nodeType":"56","messageId":"57","endLine":8,"endColumn":44},{"ruleId":"54","severity":1,"message":"58","line":19,"column":8,"nodeType":"56","messageId":"57","endLine":19,"endColumn":14},{"ruleId":"59","severity":1,"message":"60","line":154,"column":11,"nodeType":"61","endLine":157,"endColumn":12},{"ruleId":"62","severity":1,"message":"63","line":72,"column":29,"nodeType":"64","messageId":"65","endLine":72,"endColumn":57},{"ruleId":"66","severity":1,"message":"67","line":79,"column":6,"nodeType":"68","endLine":79,"endColumn":29,"suggestions":"69"},{"ruleId":"54","severity":1,"message":"70","line":2,"column":24,"nodeType":"56","messageId":"57","endLine":2,"endColumn":31},{"ruleId":"66","severity":1,"message":"71","line":84,"column":32,"nodeType":"56","endLine":84,"endColumn":39},{"ruleId":"66","severity":1,"message":"72","line":87,"column":6,"nodeType":"68","endLine":87,"endColumn":8,"suggestions":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"@typescript-eslint/no-unused-vars","'FilterOption' is defined but never used.","Identifier","unusedVar","'Search' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'date'.","ArrowFunctionExpression","unsafeRefs","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'channel', 'data.days', and 'interval'. Either include them or remove the dependency array.","ArrayExpression",["76"],"'Divider' is defined but never used.","The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'ref' and 'rootMargin'. Either include them or remove the dependency array.",["77"],"no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [timeBlock, isOnScreen, channel, interval, data.days]",{"range":"82","text":"83"},"Update the dependencies array to be: [ref, rootMargin]",{"range":"84","text":"85"},[2360,2383],"[timeBlock, isOnScreen, channel, interval, data.days]",[3044,3046],"[ref, rootMargin]"]