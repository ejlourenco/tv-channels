[{"C:\\dev\\tv-channels\\src\\index.tsx":"1","C:\\dev\\tv-channels\\src\\reportWebVitals.ts":"2","C:\\dev\\tv-channels\\src\\App.tsx":"3","C:\\dev\\tv-channels\\src\\components\\DayNavigator.tsx":"4","C:\\dev\\tv-channels\\src\\components\\HourNavigator.tsx":"5","C:\\dev\\tv-channels\\src\\components\\ChannelBlock.tsx":"6","C:\\dev\\tv-channels\\src\\components\\ChannelShows.tsx":"7","C:\\dev\\tv-channels\\src\\components\\ShowBlock.tsx":"8","C:\\dev\\tv-channels\\src\\utils\\Utils.tsx":"9","C:\\dev\\tv-channels\\src\\serviceWorkerRegistration.ts":"10"},{"size":816,"mtime":1619205497618,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":7707,"mtime":1619205656648,"results":"14","hashOfConfig":"12"},{"size":466,"mtime":1619202864770,"results":"15","hashOfConfig":"12"},{"size":1696,"mtime":1619202864770,"results":"16","hashOfConfig":"12"},{"size":590,"mtime":1619202864770,"results":"17","hashOfConfig":"12"},{"size":3951,"mtime":1619205578356,"results":"18","hashOfConfig":"12"},{"size":1045,"mtime":1619202864770,"results":"19","hashOfConfig":"12"},{"size":4718,"mtime":1619205584891,"results":"20","hashOfConfig":"12"},{"size":5256,"mtime":1615650976108,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"v0ozz6",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\dev\\tv-channels\\src\\index.tsx",[],["47","48"],"C:\\dev\\tv-channels\\src\\reportWebVitals.ts",[],"C:\\dev\\tv-channels\\src\\App.tsx",["49"],"import ReactGA from \"react-ga\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Moment from \"moment\";\nimport { DayNavigator } from \"./components/DayNavigator\";\nimport { HourNavigator } from \"./components/HourNavigator\";\nimport { ChannelBlock } from \"./components/ChannelBlock\";\nimport { Channel, Show, State } from \"./model/Model\";\nimport { ChannelShows } from \"./components/ChannelShows\";\nimport {\n  ALL_OPTION_VALUE,\n  DEFAULT_FILTER,\n  getChannels,\n  getOptionsByValues,\n  getVideoUrl,\n  useDebounce,\n} from \"./utils/Utils\";\n\nconst TRACKING_ID = \"G-FCJCN6L53X\"; // YOUR_OWN_TRACKING_ID\nReactGA.initialize(TRACKING_ID);\n\nconst channelHeight = \"3rem\";\n\nconst defaultState: State = {\n  timeBlock: {\n    StartDate: Moment().startOf(\"hour\"),\n    Hours: 6,\n  },\n  channels: [],\n  thematic: DEFAULT_FILTER,\n  highlight: \"\",\n  video: {\n    running: false,\n  },\n};\n\nfunction App() {\n  const [data, setData] = useState<State>(defaultState);\n\n  const vidRef = useRef(null);\n  const debouncedHighlight = useDebounce(data.highlight, 500);\n\n  useEffect(() => {\n    // const catalog = \"http://ott.online.meo.pt/catalog/v9/\";\n    const fetchChannels = async () => {\n      const channels = await getChannels();\n      const thematics = channels.map((channel) => channel.Thematic);\n      const allThematicOptions = getOptionsByValues(thematics);\n      setData((data) => ({\n        ...data,\n        channels,\n        thematic: {\n          ...data.thematic,\n          options: allThematicOptions,\n        },\n      }));\n    };\n    fetchChannels();\n  }, []);\n\n  const addDay = (days: number) => {\n    setData({\n      ...data,\n      timeBlock: {\n        StartDate: Moment(data.timeBlock.StartDate).add(days, \"days\"),\n        Hours: data.timeBlock.Hours,\n      },\n    });\n  };\n\n  const addHour = (hours: number) => {\n    setData({\n      ...data,\n      timeBlock: {\n        StartDate: Moment(data.timeBlock.StartDate).add(hours, \"hours\"),\n        Hours: data.timeBlock.Hours,\n      },\n    });\n  };\n\n  const zoomChange = (zoom: number) => {\n    setData({\n      ...data,\n      timeBlock: {\n        StartDate: data.timeBlock.StartDate,\n        Hours: zoom < 0 ? 2 * data.timeBlock.Hours : data.timeBlock.Hours / 2,\n      },\n    });\n  };\n\n  // @ts-ignore\n  const hls = new Hls();\n  const watchShow = (channel: Channel, show?: Show) => {\n    ReactGA.event({\n      category: \"Show\",\n      action: \"Watch\",\n      label: channel.Title + show ? \" - \" + show?.Title : \"\",\n      value: parseInt((show?.Time || \"\").split(\":\").join(\"\") || \"\"),\n    });\n\n    // do nothing\n    setData({ ...data, video: { running: true, channel, show: show } });\n    const url = getVideoUrl(channel, show);\n    setTimeout(() => {\n      const video = vidRef.current;\n      hls.loadSource(url);\n      hls.attachMedia(video);\n      // @ts-ignore\n      hls.on(Hls.Events.MANIFEST_PARSED, function () {\n        // @ts-ignore\n        video.play();\n      });\n    }, 1000);\n  };\n  const stopVideo = () => {\n    ReactGA.event({\n      category: \"Video\",\n      action: \"Back\",\n    });\n    hls.stopLoad();\n    setData({ ...data, video: { running: false } });\n  };\n\n  const getShowTitle = (show?: Show) => {\n    return show?.Title || \"\";\n  };\n\n  const onFilterChange = (value: string) => {\n    ReactGA.event({\n      category: \"Toolbar\",\n      action: \"Filter\",\n      label: value,\n    });\n\n    setData((data) => ({\n      ...data,\n      thematic: { ...data.thematic, value: value },\n    }));\n  };\n\n  const getVisibleChannels = (): Channel[] => {\n    const { value } = data.thematic;\n    const ret =\n      value && value !== ALL_OPTION_VALUE\n        ? data.channels.filter((channel) => channel.Thematic === value)\n        : data.channels;\n    // console.log({ ret });\n    return ret;\n  };\n\n  const onSearch = (e: React.FormEvent<HTMLElement>) => {\n    // @ts-ignore\n    const text = e.target.value;\n    ReactGA.event({\n      category: \"Toolbar\",\n      action: \"Filter\",\n      label: text,\n    });\n\n    setData((data) => ({ ...data, highlight: text }));\n  };\n\n  return (\n    <>\n      {data.video.running && (\n        <div>\n          {data.video.channel !== undefined && (\n            <p>\n              {data.video.channel?.Title}\n              {data.video.show !== undefined && (\n                <>\n                  <br />\n                  {data.video.show.Title}\n                </>\n              )}\n            </p>\n          )}\n          <video ref={vidRef} width=\"450\" controls />\n          {data.video.channel !== undefined && (\n            <>\n              <br />\n              <a\n                href={getVideoUrl(data.video.channel, data.video.show)}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Open in a new tab\n              </a>\n            </>\n          )}\n          {data.video.show !== undefined && <p>{data.video.show.Synopsis}</p>}\n          <button onClick={stopVideo}>back</button>\n        </div>\n      )}\n      {!data.video.running && (\n        <div style={{ overflowX: \"hidden\" }}>\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"10rem 20rem 1fr\",\n              gap: \"1rem\",\n              height: \"2rem\",\n              padding: \"0.5rem\",\n              backgroundColor: \"black\",\n            }}\n          >\n            <select\n              // prefixCls={\"Thematics\"}\n              value={data.thematic.value}\n              style={{ width: \"100%\" }}\n              onChange={(event: any) => onFilterChange(event.target.value)}\n            >\n              {data.thematic.options.map((option) => (\n                <option key={option.value} value={option.value}>\n                  {option.title}\n                </option>\n              ))}\n            </select>\n            <input\n              style={{ width: \"100%\" }}\n              placeholder=\"input search text to highlight shows\"\n              onChange={onSearch}\n            />\n          </div>\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"10rem calc(100vw - 10rem - 1px)\",\n              gap: \"1px\",\n              alignContent: \"center\",\n              justifyContent: \"center\",\n              height: \"2rem\",\n            }}\n          >\n            <DayNavigator date={data.timeBlock.StartDate} onAddDay={addDay} />\n            <HourNavigator\n              hourInterval={data.timeBlock.Hours}\n              date={data.timeBlock.StartDate}\n              onAddHour={addHour}\n              onZoomChange={zoomChange}\n            />\n          </div>\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"10rem calc(100vw - 10rem - 1px)\",\n              gap: \"1px\",\n              overflow: \"hidden auto\",\n              height: \"calc(100vh - 5rem)\",\n            }}\n          >\n            <div>\n              {getVisibleChannels().map((channel) => (\n                <ChannelBlock\n                  key={channel.Id}\n                  channel={channel}\n                  channelHeight={channelHeight}\n                  onWatchShow={() => watchShow(channel)}\n                ></ChannelBlock>\n              ))}\n            </div>\n            <div style={{ maxWidth: \"100%\" }}>\n              {getVisibleChannels().map((channel) => (\n                <ChannelShows\n                  key={channel.Id}\n                  channel={channel}\n                  channelHeight={channelHeight}\n                  timeBlock={data.timeBlock}\n                  highlight={debouncedHighlight}\n                  onWatchShow={watchShow}\n                ></ChannelShows>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","C:\\dev\\tv-channels\\src\\components\\DayNavigator.tsx",[],"C:\\dev\\tv-channels\\src\\components\\HourNavigator.tsx",[],"C:\\dev\\tv-channels\\src\\components\\ChannelBlock.tsx",[],"C:\\dev\\tv-channels\\src\\components\\ChannelShows.tsx",["50","51"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Channel, Interval, Show, TimeBlock } from \"../model/Model\";\r\nimport { ShowBlock } from \"./ShowBlock\";\r\nimport Moment from \"moment\";\r\nimport { getChannelShows, getInterval, useOnScreen } from \"../utils/Utils\";\r\n\r\nconst getShowPeriod = (show: Show): string => {\r\n  const startDate = Moment(show.StartDate).format(\"HH:mm\");\r\n  return `${startDate}`;\r\n  // const endDate = Moment(show.EndDate).format(\"HH:mm\");\r\n  // return `${startDate}-${endDate}`;\r\n};\r\n\r\nconst getWidthByShow = (\r\n  program: Show,\r\n  interval: Interval,\r\n  hourInterval: number\r\n) => {\r\n  const { StartDate, EndDate } = interval;\r\n  let programStartDate = Moment(program.StartDate);\r\n  let programEndDate = Moment(program.EndDate);\r\n  if (programStartDate.isBefore(StartDate)) {\r\n    programStartDate = Moment(StartDate);\r\n  } else if (programEndDate.isAfter(EndDate)) {\r\n    programEndDate = Moment(EndDate);\r\n  }\r\n  const durationMinutes = Moment(programEndDate).diff(\r\n    programStartDate,\r\n    \"minute\"\r\n  );\r\n  const percentageDuration =\r\n    durationMinutes === 0 ? 0 : (100 * durationMinutes) / hourInterval / 60;\r\n  // console.log({\r\n  //   StartDate,\r\n  //   EndDate,\r\n  //   programStartDate,\r\n  //   programEndDate,\r\n  //   durationMinutes,\r\n  //   percentageDuration,\r\n  //   hourInterval,\r\n  // });\r\n  return `${percentageDuration}%`;\r\n};\r\n\r\nexport const ChannelShows = ({\r\n  channelHeight,\r\n  channel,\r\n  timeBlock,\r\n  highlight,\r\n  onWatchShow,\r\n}: {\r\n  channelHeight: string;\r\n  channel: Channel;\r\n  timeBlock: TimeBlock;\r\n  highlight: string;\r\n  onWatchShow: (channel: Channel, show: Show) => any;\r\n}) => {\r\n  const [data, setData] = useState<{ shows: Show[]; days: Moment.Moment[] }>({\r\n    shows: [],\r\n    days: [],\r\n  });\r\n\r\n  const ref = useRef(null);\r\n  const isOnScreen = useOnScreen(ref);\r\n\r\n  const interval = getInterval(timeBlock);\r\n\r\n  useEffect(() => {\r\n    const fetchChannelShows = async (day: Moment.Moment) => {\r\n      const shows = await getChannelShows(channel, day);\r\n      setData((data) => ({\r\n        ...data,\r\n        days: [...data.days, day],\r\n        shows: [...data.shows, ...(shows || [])],\r\n      }));\r\n    };\r\n    if (isOnScreen) {\r\n      const { StartDate, EndDate } = interval;\r\n      let date = Moment(StartDate).startOf(\"day\");\r\n      while (date.isBefore(Moment(EndDate).endOf(\"day\"))) {\r\n        if (!data.days.find((d) => d.isSame(date, \"day\"))) {\r\n          const dateDay = date.startOf(\"day\");\r\n          fetchChannelShows(dateDay);\r\n        }\r\n        date = Moment(date).add(1, \"day\");\r\n      }\r\n    }\r\n  }, [timeBlock, isOnScreen]);\r\n\r\n  const getVisibleShows = (): Show[] => {\r\n    const { StartDate, EndDate } = getInterval(timeBlock);\r\n    let shows = data.shows\r\n      .filter(\r\n        (show) =>\r\n          !Moment(show.EndDate).isBefore(StartDate) &&\r\n          !Moment(show.StartDate).isAfter(EndDate)\r\n      )\r\n      .sort((a, b) =>\r\n        Moment(a.StartDate).isBefore(Moment(b.StartDate)) ? -1 : 1\r\n      );\r\n    // console.log({ StartDate, EndDate, shows });\r\n    return shows;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      style={{\r\n        display: \"flex\",\r\n        maxWidth: \"100%\",\r\n        borderTop: \"1px solid gray\",\r\n        height: channelHeight,\r\n      }}\r\n    >\r\n      {isOnScreen &&\r\n        getVisibleShows().map((show) => (\r\n          <ShowBlock\r\n            key={show.Id}\r\n            title={getShowPeriod(show) + \" \" + show.Title}\r\n            synopsis={show.Synopsis}\r\n            participants={show.Participants}\r\n            width={getWidthByShow(show, interval, timeBlock.Hours)}\r\n            onWatchShow={() => onWatchShow(channel, show)}\r\n            isPlayButtonVisible={\r\n              Moment(show.StartDate).isBefore(Moment()) &&\r\n              Moment(show.StartDate).isAfter(Moment().add(-1, \"d\"))\r\n            }\r\n            highlight={highlight}\r\n          ></ShowBlock>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n","C:\\dev\\tv-channels\\src\\components\\ShowBlock.tsx",[],["52","53"],"C:\\dev\\tv-channels\\src\\utils\\Utils.tsx",["54","55"],"import {\r\n  Channel,\r\n  Filter,\r\n  FilterOption,\r\n  Interval,\r\n  Show,\r\n  TimeBlock,\r\n} from \"../model/Model\";\r\nimport Moment from \"moment\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst exaustODataEndpoint = async (url: string, all = true): Promise<any> => {\r\n  const response = await fetch(url);\r\n  const decodedResponse = await response.json();\r\n  const data = decodedResponse.value;\r\n  const nextLink: string = decodedResponse[\"odata.nextLink\"];\r\n  if (nextLink && all) {\r\n    const link = nextLink.startsWith(\"http://\")\r\n      ? nextLink.split(\"http://\").join(\"https://\")\r\n      : nextLink;\r\n    const nextData = await exaustODataEndpoint(link, all);\r\n    return [...data, ...nextData];\r\n  } else {\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const getChannels = async (): Promise<Channel[]> => {\r\n  let channels: Channel[] = await exaustODataEndpoint(\r\n    \"https://ott.online.meo.pt/catalog/v9/Channels?UserAgent=IPTV_OFR_AND&OfferId=21600543&$orderby=ChannelPosition%20asc&$inlinecount=allpages\",\r\n    true\r\n  );\r\n  // channels = [channels[0], channels[1], channels[2], channels[3], channels[4]];\r\n  return channels;\r\n\r\n  // const programsByChannel = await Promise.all(\r\n  //   channels.map((channel: any) => fetchChannelData(channel, data.date))\r\n  // );\r\n  // const dataByChannel = programsByChannel.reduce<DataByChannel>(\r\n  //   (acc, pro, index) => ({ ...acc, [channels[index].Id]: pro }),\r\n  //   {}\r\n  // );\r\n};\r\n\r\nexport const getChannelShows = async (\r\n  channel: Channel,\r\n  day: Moment.Moment\r\n): Promise<Show[]> => {\r\n  const dateFormat = \"YYYY-MM-DDTHH:mm:ss\";\r\n  const startDate = Moment(day).add(-1, \"day\").endOf(\"day\").format(dateFormat);\r\n  const endDate = Moment(day).add(1, \"day\").startOf(\"day\").format(dateFormat);\r\n  return await exaustODataEndpoint(\r\n    `https://ott.online.meo.pt/Program/v9/Programs?UserAgent=IOS&$orderby=StartDate%20asc&$filter=CallLetter%20eq%20%27${channel.CallLetter}%27%20and%20StartDate%20gt%20datetime%27${startDate}%27%20and%20StartDate%20lt%20datetime%27${endDate}%27%20and%20IsEnabled%20eq%20true%20and%20IsBlackout%20eq%20false&$inlinecount=allpages`\r\n  );\r\n};\r\n\r\nexport const getInterval = (timeBlock: TimeBlock): Interval => {\r\n  return {\r\n    StartDate: timeBlock.StartDate,\r\n    EndDate: Moment(timeBlock.StartDate).add(timeBlock.Hours, \"hours\"),\r\n  };\r\n};\r\n\r\nexport function useOnScreen(ref: any, rootMargin = \"0px\") {\r\n  // State and setter for storing whether element is visible\r\n  const [isIntersecting, setIntersecting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        // Update our state when observer callback fires\r\n        setIntersecting(\r\n          entry.isIntersecting && entry.boundingClientRect.height > 0\r\n        );\r\n      },\r\n      {\r\n        rootMargin,\r\n      }\r\n    );\r\n    if (ref.current) {\r\n      observer.observe(ref.current);\r\n    }\r\n    return () => {\r\n      if (ref.current) {\r\n        observer.unobserve(ref.current);\r\n      }\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return isIntersecting;\r\n}\r\n\r\nexport const ALL_OPTION_VALUE = \"_all\";\r\nexport const ALL_OPTION: FilterOption<string> = {\r\n  value: ALL_OPTION_VALUE,\r\n  title: \"All\",\r\n};\r\n\r\nexport const DEFAULT_FILTER: Filter<string> = {\r\n  value: ALL_OPTION_VALUE,\r\n  options: [ALL_OPTION],\r\n};\r\n\r\nexport const getOptionsByValues = (\r\n  values: string[]\r\n): FilterOption<string>[] => {\r\n  // @ts-ignore\r\n  const uniqueValues: string[] = [...new Set(values)];\r\n  const options: FilterOption<string>[] = uniqueValues.map((v) => ({\r\n    value: v,\r\n    title: v,\r\n  }));\r\n  return [ALL_OPTION, ...options];\r\n};\r\n\r\nexport const getVideoUrl = (channel: Channel, show?: Show): string => {\r\n  const { FriendlyUrlName } = channel;\r\n  const { StartDate, EndDate } = show\r\n    ? show\r\n    : { StartDate: Moment(), EndDate: null };\r\n  const formattedStartDate = Moment(StartDate)\r\n    .utc()\r\n    .format(\"YYYY-MM-DDTHH:mm:00\");\r\n  const endDate = EndDate\r\n    ? Moment(EndDate).add(1, \"hour\").isAfter(Moment())\r\n      ? EndDate\r\n      : Moment(EndDate).add(1, \"hour\")\r\n    : null;\r\n  const formattedEndDate = endDate\r\n    ? Moment(endDate).utc().format(\"YYYY-MM-DDTHH:mm:00\")\r\n    : \"END\";\r\n  return `http://213.13.23.76/wp/cdn-vspp-pcs1.online.meo.pt/shls/LIVE$${FriendlyUrlName}/index.m3u8?device=IOS_Live&start=${formattedStartDate}&end=${formattedEndDate}`;\r\n};\r\n\r\nexport const useDebounce = (value: string, timeout: number) => {\r\n  const [state, setState] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => setState(value), timeout);\r\n\r\n    return () => clearTimeout(handler);\r\n  }, [value, timeout]);\r\n\r\n  return state;\r\n};\r\n","C:\\dev\\tv-channels\\src\\serviceWorkerRegistration.ts",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":124,"column":9,"nodeType":"62","messageId":"63","endLine":124,"endColumn":21},{"ruleId":"64","severity":1,"message":"65","line":81,"column":29,"nodeType":"66","messageId":"67","endLine":81,"endColumn":57},{"ruleId":"68","severity":1,"message":"69","line":88,"column":6,"nodeType":"70","endLine":88,"endColumn":29,"suggestions":"71"},{"ruleId":"56","replacedBy":"72"},{"ruleId":"58","replacedBy":"73"},{"ruleId":"68","severity":1,"message":"74","line":85,"column":32,"nodeType":"62","endLine":85,"endColumn":39},{"ruleId":"68","severity":1,"message":"75","line":88,"column":6,"nodeType":"70","endLine":88,"endColumn":8,"suggestions":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"@typescript-eslint/no-unused-vars","'getShowTitle' is assigned a value but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'date'.","ArrowFunctionExpression","unsafeRefs","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'channel', 'data.days', and 'interval'. Either include them or remove the dependency array.","ArrayExpression",["79"],["77"],["78"],"The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'ref' and 'rootMargin'. Either include them or remove the dependency array.",["80"],"no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [timeBlock, isOnScreen, channel, interval, data.days]",{"range":"85","text":"86"},"Update the dependencies array to be: [ref, rootMargin]",{"range":"87","text":"88"},[2603,2626],"[timeBlock, isOnScreen, channel, interval, data.days]",[3008,3010],"[ref, rootMargin]"]