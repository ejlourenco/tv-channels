{"version":3,"sources":["components/DayNavigator.tsx","components/HourNavigator.tsx","components/ChannelBlock.tsx","components/ShowBlock.tsx","utils/Utils.tsx","components/ChannelShows.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DayNavigator","date","onAddDay","className","shape","icon","onClick","Moment","format","HourNavigator","hourInterval","onAddHour","onZoomChange","style","display","width","position","justifyContent","alignItems","top","Array","from","length","map","_v","diff","add","BackwardOutlined","left","LeftOutlined","MinusCircleOutlined","PlusCircleOutlined","right","RightOutlined","ForwardOutlined","ChannelBlock","channel","channelHeight","onWatchShow","content","maxWidth","maxHeight","overflow","Description","bodyStyle","height","padding","Title","size","PlayCircleOutlined","ShowBlock","title","synopsis","participants","isPlayButtonVisible","highlight","placement","split","join","fontWeight","toLowerCase","includes","whiteSpace","textOverflow","exaustODataEndpoint","url","a","all","fetch","response","json","decodedResponse","data","value","nextLink","nextData","getChannels","channels","getChannelShows","day","dateFormat","startDate","endOf","endDate","startOf","CallLetter","getInterval","timeBlock","StartDate","EndDate","Hours","ALL_OPTION_VALUE","ALL_OPTION","DEFAULT_FILTER","options","getOptionsByValues","values","Set","v","getVideoUrl","show","FriendlyUrlName","formattedStartDate","formattedEndDate","getShowPeriod","getWidthByShow","program","interval","programStartDate","programEndDate","isBefore","isAfter","durationMinutes","ChannelShows","useState","shows","days","setData","ref","useRef","isOnScreen","rootMargin","isIntersecting","setIntersecting","useEffect","observer","IntersectionObserver","entry","boundingClientRect","current","observe","unobserve","useOnScreen","fetchChannelShows","find","d","isSame","dateDay","filter","sort","b","getVisibleShows","Synopsis","Participants","Id","Option","Select","Header","Layout","Sider","Content","defaultState","thematic","video","running","App","vidRef","debouncedHighlight","timeout","state","setState","handler","setTimeout","clearTimeout","useDebounce","thematics","Thematic","allThematicOptions","fetchChannels","hls","Hls","watchShow","loadSource","attachMedia","on","Events","MANIFEST_PARSED","play","getVisibleChannels","centered","visible","onCancel","stopLoad","destroyOnClose","footer","controls","undefined","href","target","align","onChange","option","placeholder","e","theme","hours","zoom","overflowY","overflowX","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30d10e4a.chunk.js","sourcesContent":["import { LeftOutlined, RightOutlined } from \"@ant-design/icons/lib/icons\";\r\nimport Button from \"antd/lib/button\";\r\nimport React from \"react\";\r\nimport Moment from \"moment\";\r\nimport \"./DayNavigator.css\";\r\n\r\ntype DayNavigatorPropType = {\r\n  date: Moment.Moment;\r\n  onAddDay: (val: number) => void;\r\n};\r\n\r\nexport const DayNavigator = ({ date, onAddDay }: DayNavigatorPropType) => {\r\n  return (\r\n    <div className=\"DayNavigator\">\r\n      <Button\r\n        shape=\"circle\"\r\n        icon={<LeftOutlined />}\r\n        onClick={() => onAddDay(-1)}\r\n      />\r\n      {Moment(date).format(\"ddd DD MMM\")}\r\n      <Button\r\n        shape=\"circle\"\r\n        icon={<RightOutlined />}\r\n        onClick={() => onAddDay(1)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Moment from \"moment\";\r\nimport Button from \"antd/lib/button\";\r\nimport {\r\n  BackwardOutlined,\r\n  ForwardOutlined,\r\n  LeftOutlined,\r\n  MinusCircleOutlined,\r\n  PlusCircleOutlined,\r\n  RightOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\ntype HourNavigatorPropType = {\r\n  hourInterval: number;\r\n  date: Moment.Moment;\r\n  onAddHour: (hour: number) => void;\r\n  onZoomChange: (zoom: number) => void;\r\n};\r\n\r\nexport const HourNavigator = ({\r\n  hourInterval,\r\n  date,\r\n  onAddHour,\r\n  onZoomChange,\r\n}: HourNavigatorPropType) => (\r\n  <div style={{ display: \"flex\", width: \"100%\", position: \"relative\" }}>\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        position: \"absolute\",\r\n        top: \"0.3rem\",\r\n      }}\r\n    >\r\n      {Array.from({ length: hourInterval + 1 }).map((_v, diff) => (\r\n        <label key={diff}>{Moment(date).add(diff, \"h\").format(\"HH:mm\")}</label>\r\n      ))}\r\n    </div>\r\n    <Button\r\n      shape=\"circle\"\r\n      icon={<BackwardOutlined />}\r\n      style={{ position: \"absolute\", left: 0 }}\r\n      onClick={() => onAddHour(-4)}\r\n    />\r\n    <Button\r\n      shape=\"circle\"\r\n      icon={<LeftOutlined />}\r\n      style={{ position: \"absolute\", left: \"2rem\" }}\r\n      onClick={() => onAddHour(-1)}\r\n    />\r\n    <Button\r\n      shape=\"circle\"\r\n      icon={<MinusCircleOutlined />}\r\n      style={{ position: \"absolute\", left: \"calc(50% - 3rem)\" }}\r\n      onClick={() => onZoomChange(-1)}\r\n    />\r\n    <Button\r\n      shape=\"circle\"\r\n      icon={<PlusCircleOutlined />}\r\n      style={{ position: \"absolute\", right: \"calc(50% - 3rem)\" }}\r\n      onClick={() => onZoomChange(1)}\r\n    />\r\n    <Button\r\n      shape=\"circle\"\r\n      icon={<RightOutlined />}\r\n      style={{ position: \"absolute\", right: \"2rem\" }}\r\n      onClick={() => onAddHour(1)}\r\n    />\r\n    <Button\r\n      shape=\"circle\"\r\n      icon={<ForwardOutlined />}\r\n      style={{ position: \"absolute\", right: 0 }}\r\n      onClick={() => onAddHour(4)}\r\n    />\r\n  </div>\r\n);\r\n","import { PlayCircleOutlined } from \"@ant-design/icons\";\r\nimport { Button, Card, Popover } from \"antd\";\r\nimport React from \"react\";\r\nimport { Channel } from \"../model/Model\";\r\n\r\nexport const ChannelBlock = ({\r\n  channel,\r\n  channelHeight,\r\n  onWatchShow,\r\n}: {\r\n  channel: Channel;\r\n  channelHeight: string;\r\n  onWatchShow: () => any;\r\n}) => (\r\n  <Popover\r\n    content={\r\n      <div\r\n        style={{\r\n          maxWidth: \"20rem\",\r\n          maxHeight: \"10rem\",\r\n          overflow: \"auto\",\r\n        }}\r\n      >\r\n        {channel.Description}\r\n      </div>\r\n    }\r\n  >\r\n    <Card\r\n      bodyStyle={{\r\n        height: channelHeight,\r\n        padding: \"0.8rem\",\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n      }}\r\n    >\r\n      <span>{channel.Title}</span>\r\n      <Button\r\n        size=\"small\"\r\n        icon={<PlayCircleOutlined />}\r\n        onClick={() => onWatchShow()}\r\n      />\r\n    </Card>\r\n  </Popover>\r\n);\r\n","import { PlayCircleOutlined } from \"@ant-design/icons\";\r\nimport { Button, Card, Divider, Popover } from \"antd\";\r\nimport React from \"react\";\r\n\r\nexport const ShowBlock = ({\r\n  title,\r\n  synopsis,\r\n  participants,\r\n  width,\r\n  channelHeight,\r\n  isPlayButtonVisible,\r\n  highlight,\r\n  onWatchShow,\r\n}: {\r\n  title: string;\r\n  synopsis: string;\r\n  participants: string;\r\n  width: string;\r\n  channelHeight: string;\r\n  isPlayButtonVisible: boolean;\r\n  highlight: string;\r\n  onWatchShow: () => any;\r\n}) => (\r\n  <Popover\r\n    placement=\"bottom\"\r\n    title={title}\r\n    content={\r\n      <div\r\n        style={{\r\n          maxWidth: \"20rem\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            maxHeight: \"10rem\",\r\n            overflow: \"auto\",\r\n          }}\r\n        >\r\n          <p>{synopsis}</p>\r\n        </div>\r\n        {participants && <p>{participants.split(\",\").join(\", \")}</p>}\r\n      </div>\r\n    }\r\n  >\r\n    <Card\r\n      style={{\r\n        position: \"relative\",\r\n        left: 0,\r\n        width,\r\n      }}\r\n      bodyStyle={{\r\n        height: channelHeight,\r\n        padding: \"0.2rem\",\r\n        fontWeight:\r\n          highlight === \"\"\r\n            ? \"inherit\"\r\n            : (title + \" \" + synopsis + \" \" + participants)\r\n                .toLowerCase()\r\n                .includes(highlight)\r\n            ? \"bold\"\r\n            : \"lighter\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          whiteSpace: \"nowrap\",\r\n          overflow: \"hidden\",\r\n          textOverflow: \"ellipsis\",\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n      {isPlayButtonVisible && (\r\n        <Button\r\n          size=\"small\"\r\n          icon={<PlayCircleOutlined />}\r\n          onClick={() => onWatchShow()}\r\n        />\r\n      )}\r\n    </Card>\r\n  </Popover>\r\n);\r\n","import {\r\n  Channel,\r\n  Filter,\r\n  FilterOption,\r\n  Interval,\r\n  Show,\r\n  TimeBlock,\r\n} from \"../model/Model\";\r\nimport Moment from \"moment\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst exaustODataEndpoint = async (url: string, all = true): Promise<any> => {\r\n  const response = await fetch(url);\r\n  const decodedResponse = await response.json();\r\n  const data = decodedResponse.value;\r\n  const nextLink = decodedResponse[\"odata.nextLink\"];\r\n  if (nextLink && all) {\r\n    const nextData = await exaustODataEndpoint(nextLink, all);\r\n    return [...data, ...nextData];\r\n  } else {\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const getChannels = async (): Promise<Channel[]> => {\r\n  let channels: Channel[] = await exaustODataEndpoint(\r\n    \"http://ott.online.meo.pt/catalog/v9/Channels?UserAgent=IPTV_OFR_AND&OfferId=21600543&$orderby=ChannelPosition%20asc&$inlinecount=allpages\",\r\n    true\r\n  );\r\n  // channels = [channels[0], channels[1], channels[2], channels[3], channels[4]];\r\n  return channels;\r\n\r\n  // const programsByChannel = await Promise.all(\r\n  //   channels.map((channel: any) => fetchChannelData(channel, data.date))\r\n  // );\r\n  // const dataByChannel = programsByChannel.reduce<DataByChannel>(\r\n  //   (acc, pro, index) => ({ ...acc, [channels[index].Id]: pro }),\r\n  //   {}\r\n  // );\r\n};\r\n\r\nexport const getChannelShows = async (\r\n  channel: Channel,\r\n  day: Moment.Moment\r\n): Promise<Show[]> => {\r\n  const dateFormat = \"YYYY-MM-DDTHH:mm:ss\";\r\n  const startDate = Moment(day).add(-1, \"day\").endOf(\"day\").format(dateFormat);\r\n  const endDate = Moment(day).add(1, \"day\").startOf(\"day\").format(dateFormat);\r\n  return await exaustODataEndpoint(\r\n    `http://ott.online.meo.pt/Program/v9/Programs?UserAgent=IOS&$orderby=StartDate%20asc&$filter=CallLetter%20eq%20%27${channel.CallLetter}%27%20and%20StartDate%20gt%20datetime%27${startDate}%27%20and%20StartDate%20lt%20datetime%27${endDate}%27%20and%20IsEnabled%20eq%20true%20and%20IsBlackout%20eq%20false&$inlinecount=allpages`\r\n  );\r\n\r\n  // const result = await axios(`http://services.sapo.pt/EPG/GetChannelByDateInterval?channelSigla=${channelNick}&startDate=${startDate}&endDate=${endDate}`);\r\n};\r\n\r\nexport const getInterval = (timeBlock: TimeBlock): Interval => {\r\n  return {\r\n    StartDate: timeBlock.StartDate,\r\n    EndDate: Moment(timeBlock.StartDate).add(timeBlock.Hours, \"hours\"),\r\n  };\r\n};\r\n\r\nexport function useOnScreen(ref: any, rootMargin = \"0px\") {\r\n  // State and setter for storing whether element is visible\r\n  const [isIntersecting, setIntersecting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        // Update our state when observer callback fires\r\n        setIntersecting(\r\n          entry.isIntersecting && entry.boundingClientRect.height > 0\r\n        );\r\n      },\r\n      {\r\n        rootMargin,\r\n      }\r\n    );\r\n    if (ref.current) {\r\n      observer.observe(ref.current);\r\n    }\r\n    return () => {\r\n      if (ref.current) {\r\n        observer.unobserve(ref.current);\r\n      }\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return isIntersecting;\r\n}\r\n\r\nexport const ALL_OPTION_VALUE = \"_all\";\r\nexport const ALL_OPTION: FilterOption<string> = {\r\n  value: ALL_OPTION_VALUE,\r\n  title: \"All\",\r\n};\r\n\r\nexport const DEFAULT_FILTER: Filter<string> = {\r\n  value: ALL_OPTION_VALUE,\r\n  options: [ALL_OPTION],\r\n};\r\n\r\nexport const getOptionsByValues = (\r\n  values: string[]\r\n): FilterOption<string>[] => {\r\n  // @ts-ignore\r\n  const uniqueValues: string[] = [...new Set(values)];\r\n  const options: FilterOption<string>[] = uniqueValues.map((v) => ({\r\n    value: v,\r\n    title: v,\r\n  }));\r\n  return [ALL_OPTION, ...options];\r\n};\r\n\r\nexport const getVideoUrl = (channel: Channel, show?: Show): string => {\r\n  const { FriendlyUrlName } = channel;\r\n  const { StartDate, EndDate } = show\r\n    ? show\r\n    : { StartDate: Moment(), EndDate: null };\r\n  const formattedStartDate = Moment(StartDate).format(\"YYYY-MM-DDTHH:mm:00\");\r\n  const formattedEndDate = EndDate\r\n    ? Moment(EndDate).format(\"YYYY-MM-DDTHH:mm:00\")\r\n    : \"END\";\r\n  return `http://213.13.23.76/wp/cdn-vspp-pcs1.online.meo.pt/shls/LIVE$${FriendlyUrlName}/index.m3u8?device=IOS_Live&start=${formattedStartDate}&end=${formattedEndDate}`;\r\n};\r\n\r\nexport const useDebounce = (value: string, timeout: number) => {\r\n  const [state, setState] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => setState(value), timeout);\r\n\r\n    return () => clearTimeout(handler);\r\n  }, [value, timeout]);\r\n\r\n  return state;\r\n};\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Channel, Interval, Show, TimeBlock } from \"../model/Model\";\r\nimport { ShowBlock } from \"./ShowBlock\";\r\nimport Moment from \"moment\";\r\nimport { getChannelShows, getInterval, useOnScreen } from \"../utils/Utils\";\r\nimport \"./ChannelShows.css\";\r\n\r\nconst getShowPeriod = (show: Show): string => {\r\n  return `${Moment(show.StartDate).format(\"HH:mm\")}-${Moment(\r\n    show.EndDate\r\n  ).format(\"HH:mm\")}`;\r\n};\r\n\r\nconst getWidthByShow = (\r\n  program: Show,\r\n  interval: Interval,\r\n  hourInterval: number\r\n) => {\r\n  const { StartDate, EndDate } = interval;\r\n  let programStartDate = Moment(program.StartDate);\r\n  let programEndDate = Moment(program.EndDate);\r\n  if (programStartDate.isBefore(StartDate)) {\r\n    programStartDate = Moment(StartDate);\r\n  } else if (programEndDate.isAfter(EndDate)) {\r\n    programEndDate = Moment(EndDate);\r\n  }\r\n  const durationMinutes = Moment(programEndDate).diff(\r\n    programStartDate,\r\n    \"minute\"\r\n  );\r\n  const percentageDuration =\r\n    durationMinutes === 0 ? 0 : (100 * durationMinutes) / hourInterval / 60;\r\n  return `${percentageDuration}%`;\r\n};\r\n\r\nexport const ChannelShows = ({\r\n  channelHeight,\r\n  channel,\r\n  timeBlock,\r\n  highlight,\r\n  onWatchShow,\r\n}: {\r\n  channelHeight: string;\r\n  channel: Channel;\r\n  timeBlock: TimeBlock;\r\n  highlight: string;\r\n  onWatchShow: (channel: Channel, show: Show) => any;\r\n}) => {\r\n  const [data, setData] = useState<{ shows: Show[]; days: Moment.Moment[] }>({\r\n    shows: [],\r\n    days: [],\r\n  });\r\n\r\n  const ref = useRef(null);\r\n  const isOnScreen = useOnScreen(ref);\r\n\r\n  const interval = getInterval(timeBlock);\r\n\r\n  useEffect(() => {\r\n    const fetchChannelShows = async (day: Moment.Moment) => {\r\n      const shows = await getChannelShows(channel, day);\r\n      setData((data) => ({\r\n        ...data,\r\n        days: [...data.days, day],\r\n        shows: [...data.shows, ...(shows || [])],\r\n      }));\r\n    };\r\n    if (isOnScreen) {\r\n      const { StartDate, EndDate } = interval;\r\n      let date = Moment(StartDate).startOf(\"day\");\r\n      while (date.isBefore(Moment(EndDate).endOf(\"day\"))) {\r\n        if (!data.days.find((d) => d.isSame(date, \"day\"))) {\r\n          const dateDay = date.startOf(\"day\");\r\n          fetchChannelShows(dateDay);\r\n        }\r\n        date = Moment(date).add(1, \"day\");\r\n      }\r\n    }\r\n  }, [timeBlock, isOnScreen]);\r\n\r\n  const getVisibleShows = (): Show[] => {\r\n    const { StartDate, EndDate } = getInterval(timeBlock);\r\n    let shows = data.shows\r\n      .filter(\r\n        (show) =>\r\n          !Moment(show.EndDate).isBefore(StartDate) &&\r\n          !Moment(show.StartDate).isAfter(EndDate)\r\n      )\r\n      .sort((a, b) =>\r\n        Moment(a.StartDate).isBefore(Moment(b.StartDate)) ? -1 : 1\r\n      );\r\n    return shows;\r\n  };\r\n\r\n  return (\r\n    <div ref={ref} className=\"ChannelShows__Content\">\r\n      {isOnScreen &&\r\n        getVisibleShows().map((show) => (\r\n          <ShowBlock\r\n            key={show.Id}\r\n            title={getShowPeriod(show) + \" \" + show.Title}\r\n            synopsis={show.Synopsis}\r\n            participants={show.Participants}\r\n            width={getWidthByShow(show, interval, timeBlock.Hours)}\r\n            channelHeight={channelHeight}\r\n            onWatchShow={() => onWatchShow(channel, show)}\r\n            isPlayButtonVisible={\r\n              Moment(show.StartDate).isBefore(Moment()) &&\r\n              Moment(show.StartDate).isAfter(Moment().add(-1, \"d\"))\r\n            }\r\n            highlight={highlight}\r\n          ></ShowBlock>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport { Input, Layout, Modal, Space } from \"antd\";\nimport Moment from \"moment\";\nimport { DayNavigator } from \"./components/DayNavigator\";\nimport { HourNavigator } from \"./components/HourNavigator\";\nimport { ChannelBlock } from \"./components/ChannelBlock\";\nimport { Channel, Show, State, FilterOption } from \"./model/Model\";\nimport { ChannelShows } from \"./components/ChannelShows\";\nimport {\n  ALL_OPTION_VALUE,\n  DEFAULT_FILTER,\n  getChannels,\n  getOptionsByValues,\n  getVideoUrl,\n  useDebounce,\n} from \"./utils/Utils\";\nimport { Select } from \"antd\";\nimport Search from \"antd/lib/transfer/search\";\n\nconst { Option } = Select;\n\nconst { Header, Sider, Content } = Layout;\n\nconst channelHeight = \"3.4rem\";\n\nconst defaultState: State = {\n  timeBlock: {\n    StartDate: Moment().startOf(\"hour\"),\n    Hours: 6,\n  },\n  channels: [],\n  thematic: DEFAULT_FILTER,\n  highlight: \"\",\n  video: {\n    running: false,\n  },\n};\n\nfunction App() {\n  const [data, setData] = useState<State>(defaultState);\n\n  const vidRef = useRef(null);\n  const debouncedHighlight = useDebounce(data.highlight, 500);\n\n  useEffect(() => {\n    // const catalog = \"http://ott.online.meo.pt/catalog/v9/\";\n    const fetchChannels = async () => {\n      const channels = await getChannels();\n      const thematics = channels.map((channel) => channel.Thematic);\n      const allThematicOptions = getOptionsByValues(thematics);\n      setData((data) => ({\n        ...data,\n        channels,\n        thematic: {\n          ...data.thematic,\n          options: allThematicOptions,\n        },\n      }));\n    };\n    fetchChannels();\n  }, []);\n\n  const addDay = (days: number) => {\n    setData({\n      ...data,\n      timeBlock: {\n        StartDate: Moment(data.timeBlock.StartDate).add(days, \"days\"),\n        Hours: data.timeBlock.Hours,\n      },\n    });\n  };\n\n  const addHour = (hours: number) => {\n    setData({\n      ...data,\n      timeBlock: {\n        StartDate: Moment(data.timeBlock.StartDate).add(hours, \"hours\"),\n        Hours: data.timeBlock.Hours,\n      },\n    });\n  };\n\n  const zoomChange = (zoom: number) => {\n    setData({\n      ...data,\n      timeBlock: {\n        StartDate: data.timeBlock.StartDate,\n        Hours: zoom < 0 ? 2 * data.timeBlock.Hours : data.timeBlock.Hours / 2,\n      },\n    });\n  };\n\n  // @ts-ignore\n  const hls = new Hls();\n  const watchShow = (channel: Channel, show?: Show) => {\n    // do nothing\n    setData({ ...data, video: { running: true, channel, show: show } });\n    const url = getVideoUrl(channel, show);\n    setTimeout(() => {\n      const video = vidRef.current;\n      hls.loadSource(url);\n      hls.attachMedia(video);\n      // @ts-ignore\n      hls.on(Hls.Events.MANIFEST_PARSED, function () {\n        // @ts-ignore\n        video.play();\n      });\n    }, 1000);\n  };\n  const stopVideo = () => {\n    // const video = vidRef.current;\n    hls.stopLoad();\n    setData({ ...data, video: { running: false } });\n  };\n\n  const getShowTitle = (show?: Show) => {\n    return show?.Title || \"\";\n  };\n\n  const onFilterChange = (value: string) => {\n    setData((data) => ({\n      ...data,\n      thematic: { ...data.thematic, value: value },\n    }));\n  };\n\n  const getVisibleChannels = (): Channel[] => {\n    const { value } = data.thematic;\n    return value && value !== ALL_OPTION_VALUE\n      ? data.channels.filter((channel) => channel.Thematic === value)\n      : data.channels;\n  };\n\n  const onSearch = (e: React.FormEvent<HTMLElement>) => {\n    // @ts-ignore\n    setData((data) => ({ ...data, highlight: e.target.value }));\n  };\n\n  return (\n    <>\n      <Modal\n        title={\n          data.video.channel?.Title + \" - \" + getShowTitle(data.video.show)\n        }\n        centered\n        visible={data.video.running}\n        onCancel={stopVideo}\n        destroyOnClose={true}\n        footer={null}\n      >\n        <video ref={vidRef} width=\"450\" controls />\n        {data.video.channel !== undefined && (\n          <a\n            href={getVideoUrl(data.video.channel, data.video.show)}\n            target=\"_blank\"\n          >\n            Open in a new tab\n          </a>\n        )}\n      </Modal>\n      <Layout>\n        <Header>\n          <Space\n            align=\"center\"\n            style={{ width: \"100%\", height: \"100%\", alignItems: \"baseline\" }}\n          >\n            <Select\n              // prefixCls={\"Thematics\"}\n              value={data.thematic.value}\n              onChange={onFilterChange}\n              style={{ width: \"8rem\" }}\n            >\n              {data.thematic.options.map((option) => (\n                <Option value={option.value}>{option.title}</Option>\n              ))}\n            </Select>\n            <Input\n              style={{ width: \"16rem\" }}\n              placeholder=\"input search text to highlight shows\"\n              onChange={onSearch}\n            />\n          </Space>\n        </Header>\n        <Layout>\n          <Sider theme=\"light\">\n            <DayNavigator date={data.timeBlock.StartDate} onAddDay={addDay} />\n          </Sider>\n          <Content>\n            <HourNavigator\n              hourInterval={data.timeBlock.Hours}\n              date={data.timeBlock.StartDate}\n              onAddHour={addHour}\n              onZoomChange={zoomChange}\n            />\n          </Content>\n        </Layout>\n        <Layout\n          style={{\n            overflowY: \"auto\",\n            overflowX: \"hidden\",\n            height: \"calc(100vh - 6rem)\",\n          }}\n        >\n          <Sider theme=\"light\">\n            {getVisibleChannels().map((channel) => (\n              <ChannelBlock\n                key={channel.Id}\n                channel={channel}\n                channelHeight={channelHeight}\n                onWatchShow={() => watchShow(channel)}\n              ></ChannelBlock>\n            ))}\n          </Sider>\n          <Content>\n            {getVisibleChannels().map((channel) => (\n              <ChannelShows\n                key={channel.Id}\n                channel={channel}\n                channelHeight={channelHeight}\n                timeBlock={data.timeBlock}\n                highlight={debouncedHighlight}\n                onWatchShow={watchShow}\n              ></ChannelShows>\n            ))}\n          </Content>\n        </Layout>\n      </Layout>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}